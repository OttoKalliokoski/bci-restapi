openapi: 3.0.0
info:
  title: Internet shop api
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  /api/items:
    get:
      summary: GET items
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not Found
      operationId: get-api-items
      description: Get all items
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
        description: ''
    post:
      summary: POST items
      operationId: post-api-items
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not Found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      description: Post an item
    parameters: []
  '/api/items/:id':
    delete:
      summary: Delete item by id
      operationId: Delete item by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not Found
      description: Delete item
    get:
      summary: Get item by id
      operationId: Get item by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not Found
      description: Get item by id
    put:
      summary: Modify item by id
      operationId: Modify item by id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not Found
      description: Modify item by id
  '/api/items/:search/:word':
    get:
      summary: Search by searchwords
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: Not Found
      operationId: 'get-api-items-:search-:word'
      description: 'Search by category, date and location'
  /api/user:
    get:
      summary: GET all users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
      operationId: get-api-user
      description: Get all users
  '/api/user/:id':
    get:
      summary: Get user by id
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
      operationId: 'get-api-user-:id'
      description: Get user by id
  /user/signin:
    get:
      summary: Create a new user
      tags: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
      operationId: get-user-signin
      description: Create a new account for user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
                - username
                - email
                - password
components:
  schemas:
    User:
      title: User
      type: object
      x-examples:
        example-1:
          id: '1'
          username: Otto
          email: otto@email.com
          password: qwerty
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        password:
          type: string
    Item:
      title: Item
      type: object
      x-examples:
        example-1:
          id: 0
          name: string
          price: 0
          title: string
          category: string
          location: string
          date: string
          phoneNumber: 0
          description: string
          deliveryType: string
      properties:
        id:
          type: number
        name:
          type: string
        price:
          type: number
        title:
          type: string
        category:
          type: string
        location:
          type: string
        date:
          type: string
        phoneNumber:
          type: number
        description:
          type: string
        deliveryType:
          type: string
      required:
        - id
        - name
        - price
        - title
        - category
        - location
        - date
        - phoneNumber
        - description
  securitySchemes:
    API Key - 1:
      name: API Key
      type: apiKey
      in: query
